// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goexample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PuzzleClient is the client API for Puzzle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PuzzleClient interface {
	StartHere(ctx context.Context, in *YourName, opts ...grpc.CallOption) (*ClueOne, error)
	EndpointOne(ctx context.Context, in *ClueOne, opts ...grpc.CallOption) (*ClueTwo, error)
	EndpointTwo(ctx context.Context, in *ClueTwo, opts ...grpc.CallOption) (*ClueThree, error)
	EndpointThree(ctx context.Context, in *ClueThree, opts ...grpc.CallOption) (*ClueFour, error)
	SolvePuzzle(ctx context.Context, in *Key, opts ...grpc.CallOption) (*FinalSecret, error)
}

type puzzleClient struct {
	cc grpc.ClientConnInterface
}

func NewPuzzleClient(cc grpc.ClientConnInterface) PuzzleClient {
	return &puzzleClient{cc}
}

func (c *puzzleClient) StartHere(ctx context.Context, in *YourName, opts ...grpc.CallOption) (*ClueOne, error) {
	out := new(ClueOne)
	err := c.cc.Invoke(ctx, "/com.jayway.kday.grpc.Puzzle/StartHere", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puzzleClient) EndpointOne(ctx context.Context, in *ClueOne, opts ...grpc.CallOption) (*ClueTwo, error) {
	out := new(ClueTwo)
	err := c.cc.Invoke(ctx, "/com.jayway.kday.grpc.Puzzle/endpointOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puzzleClient) EndpointTwo(ctx context.Context, in *ClueTwo, opts ...grpc.CallOption) (*ClueThree, error) {
	out := new(ClueThree)
	err := c.cc.Invoke(ctx, "/com.jayway.kday.grpc.Puzzle/endpointTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puzzleClient) EndpointThree(ctx context.Context, in *ClueThree, opts ...grpc.CallOption) (*ClueFour, error) {
	out := new(ClueFour)
	err := c.cc.Invoke(ctx, "/com.jayway.kday.grpc.Puzzle/endpointThree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puzzleClient) SolvePuzzle(ctx context.Context, in *Key, opts ...grpc.CallOption) (*FinalSecret, error) {
	out := new(FinalSecret)
	err := c.cc.Invoke(ctx, "/com.jayway.kday.grpc.Puzzle/SolvePuzzle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PuzzleServer is the server API for Puzzle service.
// All implementations must embed UnimplementedPuzzleServer
// for forward compatibility
type PuzzleServer interface {
	StartHere(context.Context, *YourName) (*ClueOne, error)
	EndpointOne(context.Context, *ClueOne) (*ClueTwo, error)
	EndpointTwo(context.Context, *ClueTwo) (*ClueThree, error)
	EndpointThree(context.Context, *ClueThree) (*ClueFour, error)
	SolvePuzzle(context.Context, *Key) (*FinalSecret, error)
	mustEmbedUnimplementedPuzzleServer()
}

// UnimplementedPuzzleServer must be embedded to have forward compatible implementations.
type UnimplementedPuzzleServer struct {
}

func (UnimplementedPuzzleServer) StartHere(context.Context, *YourName) (*ClueOne, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHere not implemented")
}
func (UnimplementedPuzzleServer) EndpointOne(context.Context, *ClueOne) (*ClueTwo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndpointOne not implemented")
}
func (UnimplementedPuzzleServer) EndpointTwo(context.Context, *ClueTwo) (*ClueThree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndpointTwo not implemented")
}
func (UnimplementedPuzzleServer) EndpointThree(context.Context, *ClueThree) (*ClueFour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndpointThree not implemented")
}
func (UnimplementedPuzzleServer) SolvePuzzle(context.Context, *Key) (*FinalSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolvePuzzle not implemented")
}
func (UnimplementedPuzzleServer) mustEmbedUnimplementedPuzzleServer() {}

// UnsafePuzzleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PuzzleServer will
// result in compilation errors.
type UnsafePuzzleServer interface {
	mustEmbedUnimplementedPuzzleServer()
}

func RegisterPuzzleServer(s grpc.ServiceRegistrar, srv PuzzleServer) {
	s.RegisterService(&_Puzzle_serviceDesc, srv)
}

func _Puzzle_StartHere_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YourName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuzzleServer).StartHere(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.jayway.kday.grpc.Puzzle/StartHere",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuzzleServer).StartHere(ctx, req.(*YourName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puzzle_EndpointOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClueOne)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuzzleServer).EndpointOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.jayway.kday.grpc.Puzzle/endpointOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuzzleServer).EndpointOne(ctx, req.(*ClueOne))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puzzle_EndpointTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClueTwo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuzzleServer).EndpointTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.jayway.kday.grpc.Puzzle/endpointTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuzzleServer).EndpointTwo(ctx, req.(*ClueTwo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puzzle_EndpointThree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClueThree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuzzleServer).EndpointThree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.jayway.kday.grpc.Puzzle/endpointThree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuzzleServer).EndpointThree(ctx, req.(*ClueThree))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puzzle_SolvePuzzle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuzzleServer).SolvePuzzle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.jayway.kday.grpc.Puzzle/SolvePuzzle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuzzleServer).SolvePuzzle(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

var _Puzzle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.jayway.kday.grpc.Puzzle",
	HandlerType: (*PuzzleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartHere",
			Handler:    _Puzzle_StartHere_Handler,
		},
		{
			MethodName: "endpointOne",
			Handler:    _Puzzle_EndpointOne_Handler,
		},
		{
			MethodName: "endpointTwo",
			Handler:    _Puzzle_EndpointTwo_Handler,
		},
		{
			MethodName: "endpointThree",
			Handler:    _Puzzle_EndpointThree_Handler,
		},
		{
			MethodName: "SolvePuzzle",
			Handler:    _Puzzle_SolvePuzzle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-puzzle.proto",
}
